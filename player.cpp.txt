using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Player : MonoBehaviour
{
    #region// 設定
    [Header("移動速度")] public float speed;  // 速度
    [Header("重力")] public float gravity;    // 重力
    [Header("ジャンプ速度")] public float jumpSpeed;      // ジャンプする速度
    [Header("ジャンプする高さ")] public float jumpHeight; // 高さ制限
    [Header("ジャンプする長さ")] public float jumpLimitTime; // ジャンプ制限時間
    [Header("接地判定")] public GroundCheck ground;          //接地判定
    [Header("天井判定")] public GroundCheck head;            // 頭ぶつけた判定
    [Header("ダッシュの速さ表現")] public AnimationCurve dashCurve; // ダッシュの速さ表現のグラフ
    [Header("ジャンプの速さ表現")] public AnimationCurve jumpCurve; // ジャンプの速さ表現のグラフ
    [Header("踏みつけ判定の高さの割合(%)")] public float stepOnRate;
    [Header("ジャンプする時に鳴らすSE")] public AudioClip jumpSE;
    [Header("やられた鳴らすSE")] public AudioClip downSE;
    [Header("コンテニュー時に鳴らすSE")] public AudioClip continueSE;
    #endregion


    #region// 変数
    private Animator anim = null;
    private Rigidbody2D rb = null;
    private CapsuleCollider2D capcol = null;
    private bool isGround = false;
    private bool isHead = false;
    private bool isJump = false;
    private bool isRun = false;
    private bool isDown = false;
    private bool isOtherJump = false;
    private bool isClearMotion = false;
    private float jumpPos = 0.0f;
    private float otherJumpHeight = 0.0f;
    private float otherJumpSpeed = 0.0f;
    private float dashTime, jumpTime;
    private float beforeKey;
    private string enemyTag = "Enemy";
    private string moveFloorTag = "MoveFloor";
    private string jumpStepTag = "JumpStep";
    private bool isContinue = false;
    private float continueTime, blinkTime;
    private SpriteRenderer sr = null;
    private MoveObject moveObj;
    #endregion

    void Start()
    {
        anim = GetComponent<Animator>();
        rb = GetComponent<Rigidbody2D>();
        capcol = GetComponent<CapsuleCollider2D>();
        sr = GetComponent<SpriteRenderer>();
    }

    private void Update()
    {
        if(isContinue)
        {
            // 明減　ついている時に戻る
            if (blinkTime > 0.2f)
            {
                sr.enabled = true;
                blinkTime = 0.0f;
            }
            // 明減　消えている時
            else if (blinkTime > 0.1f)
            {
                sr.enabled = false;
            }
            // 明減　ついている時
            else
            {
                sr.enabled = true;
            }
            // 1秒たったら明減終わり
            if(continueTime > 1.0f)
            {
                isContinue = false;
                blinkTime = 0f;
                continueTime = 0f;
                sr.enabled = true;
            }
            else
            {
                blinkTime += Time.deltaTime;
                continueTime += Time.deltaTime;
            }
        }
    }


    void FixedUpdate()
    {
        if (!isDown && !GManager.instance.isGameOver && !GManager.instance.isStageClear)
        {
            // 接地判定
            isGround = ground.IsGround();
            isHead = head.IsGround();

            // 各種座標軸の速度を求める
            float xSpeed = GetXSpeed();
            float ySpeed = GetYSpeed();

            // アニメーションを適用
            SetAnimation();

            // 移動速度を設定
            Vector2 addVelocity = Vector2.zero;
            if(moveObj != null)
            {
                //addVelocity = moveObj.GetVelocity(); //
            }
            rb.velocity = new Vector2(xSpeed, ySpeed) + addVelocity;
        }
        else
        {
            if(!isClearMotion && GManager.instance.isStageClear)
            {
                anim.Play("player_clear");
                isClearMotion = true;
            }
            rb.velocity = new Vector2(0, -gravity);
        }
    }

    /// <summary>
    /// Y成分で必要な計算をし、速度を返す。
    /// </summary>
    /// <returns>Y軸の速さ</returns>
    private float GetYSpeed()
    {
        float verticalKey = Input.GetAxis("Vertical");
        float ySpeed = -gravity;

        // 地面にいるとき
        if (isGround)
        {
            if (verticalKey > 0 && jumpTime < jumpLimitTime)
            {
                ySpeed = jumpSpeed;
                jumpPos = transform.position.y; // ジャンプした位置を記録
                isJump = true;
                jumpTime = 0.0f;
                GManager.instance.PlaySE(jumpSE);
            }
            else
            {
                isJump = false;
                isOtherJump = false;
            }
        }
        // 何かを踏んだ際のジャンプ
        else if (isOtherJump)
        {
            // 
            if (jumpPos + otherJumpHeight > transform.position.y && jumpTime < jumpLimitTime && !isHead)
            {
                ySpeed = otherJumpSpeed;
               // ySpeed = jumpSpeed;
                jumpTime += Time.deltaTime;
            }
            else
            {
                isOtherJump = false;
                jumpTime = 0.0f;
            }
        }

        // ジャンプ中
        else if (isJump)
        {
            // 上ボタン、現在の高さがジャンプした位置から自分の決めた位置よりしたならジャンプを継続
            if (verticalKey > 0 && jumpPos + jumpHeight > transform.position.y && jumpTime < jumpLimitTime && !isHead)
            {
                ySpeed = jumpSpeed;
                jumpTime += Time.deltaTime;
            }
            else

            {
                isJump = false;
                jumpTime = 0.0f;
            }
        }
        
        if(isJump)
        {
            ySpeed *= jumpCurve.Evaluate(jumpTime);
        }
        return ySpeed;
    }

    /// <summary>
    /// X成分で必要な計算をし、速度を返す。
    /// </summary>
    /// <returns>X軸の速さ</returns>
    private float GetXSpeed()
    {
        float horizontalKey = Input.GetAxis("Horizontal");
        float xSpeed = 0.0f;
        if(horizontalKey > 0)
        {
            transform.localScale = new Vector3(1, 1, 1);
            isRun = true;
            dashTime += Time.deltaTime;
            xSpeed = speed;
        }
        else if (horizontalKey < 0)
        {
            transform.localScale = new Vector3(-1, 1, 1);
            isRun = true;
            dashTime += Time.deltaTime;
            xSpeed = -speed;
        }
        else
        {
            isRun = false;
            xSpeed = 0.0f;
            dashTime = 0.0f;
        }

   
        // ダッシュの判定を判断して速度を変える
        if(horizontalKey > 0 && beforeKey < 0)
        {
            dashTime = 0.0f;
        }
        else if(horizontalKey < 0 && beforeKey > 0)
        {
            dashTime = 0.0f;
        }

        beforeKey = horizontalKey;
        xSpeed *= dashCurve.Evaluate(dashTime);
        beforeKey = horizontalKey;
        return xSpeed;
    }

    /// <summary>
    /// アニメーションを設定する
    /// </summary>
    private void SetAnimation()
    {
        anim.SetBool("jump", isJump || isOtherJump);
        anim.SetBool("ground", isGround);
        anim.SetBool("run", isRun);
    }

    
    /// <summary>
    /// ダウンアニメーションが終わっているかどうか
    /// </summary>
    /// <returns>終了しているかどうか</returns>
    public bool IsDownAnimEnd()
    {
        if(isDown && anim != null)
        {
            AnimatorStateInfo currentState = anim.GetCurrentAnimatorStateInfo(0);
            if(currentState.IsName("player_down_anim"))
            {
                if(currentState.normalizedTime >= 1)
                {
                    return true;
                }
            }
        }
        return false;
    }

    /// <summary>
    /// コンテニューする
    /// </summary>
   public void ContinuePlayer()
    {
        isDown = false;
        anim.Play("player_anim");
        isJump = false;
        isOtherJump = false;
        isRun = false;
        isContinue = true;
        GManager.instance.PlaySE(continueSE);
    }


    #region//接触判定
    private void OnCollisionEnter2D(Collision2D collision)
    {
        if(!GManager.instance.isStageClear && !GManager.instance.isGameOver)
        { 

            if (collision.collider.tag == enemyTag)
        {
                // 踏みつけ判定になる高さ
                float stepOnHeight = (capcol.size.y * (stepOnRate / 100f));

                // 踏みつけ判定のワールド座標
                float judgePos = transform.position.y - (capcol.size.y / 2f) + stepOnHeight;
                foreach (ContactPoint2D p in collision.contacts)
                {
                    if (p.point.y < judgePos)
                    {
                        //もう一度跳ねる
                        ObjectCollision o = collision.gameObject.GetComponent<ObjectCollision>();
                        if (o != null)
                        {
                            jumpPos = transform.position.y;   // ジャンプした位置を記録
                            otherJumpHeight = o.boundHeight; // 踏んづけたものから跳ねる高さを取得
                            otherJumpSpeed = o.jumpSpeed;      // 踏んづけたものから跳ねる速さを取得
                            o.playerStepOn = true;            // 踏んづけたものに対して踏んづけた事を通知
                            isOtherJump = true;
                            isJump = false;
                            jumpTime = 0.0f;
                        }
                        else
                        {
                            //ダウンする
                            Debug.Log("ObjectCollisionが付いてないよ!");
                        }
                    }
                    else
                    {
                        anim.Play("player_down_anim");
                        isDown = true;
                        GManager.instance.SubHeartNum();
                        GManager.instance.PlaySE(downSE);
                        break;
                    }
                }
            }
            else if(collision.collider.tag == jumpStepTag)
            {
                // 踏みつけ判定になる高さ
                float stepOnHeight = (capcol.size.y * (stepOnRate / 100f));
                // 踏みつけ判定のワールド座標
                float judgePos = transform.position.y - (capcol.size.y / 2f) + stepOnHeight;

                foreach(ContactPoint2D p in collision.contacts)
                {
                    if(p.point.y < judgePos)
                    {
                        ObjectCollision o = collision.gameObject.GetComponent<ObjectCollision>();
                        if(o != null)
                        {
                            jumpPos = transform.position.y; // ジャンプした位置を記録
                            otherJumpHeight = o.boundHeight; // 踏んづけたものから跳ねる高さを取得
                            otherJumpSpeed = o.jumpSpeed;    // 踏んづけたものから跳ねる速さを取得
                            o.playerStepOn = true;           // 
                            isOtherJump = true;
                            isJump = false;
                            jumpTime = 0.0f;
                        }
                        else
                        {
                            Debug.Log("ObjectCollisionが付いてないよ!");
                        }
                    }
                }
            }

            // 動く床
            else if(collision.collider.tag == moveFloorTag)
            {
                // 踏みつけ判定になる高さ
                float stepOnHeight = (capcol.size.y * (stepOnRate / 100f));
                // 踏みつけ判定のワールド座標
                float judgePos = transform.position.y - (capcol.size.y / 2f) + stepOnHeight;

                foreach (ContactPoint2D p in collision.contacts)
                {
                    // 動く床に乗っている
                    if(p.point.y < judgePos)
                    {
                       moveObj = collision.gameObject.GetComponent<MoveObject>();
                    }
                }
            }
        }
    }

    private void OnCollisionExit2D(Collision2D collision)
    {
        if(collision.collider.tag == moveFloorTag)
        {
            // 動く床から離れた
            moveObj = null;
        }
    }
    #endregion

}





using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Player : MonoBehaviour
{
    // 設定
    public float speed; // 速度
    public float gravity; // 重力
    public GroundCheck ground; // 接地判定
    public float jumpSpeed; // ジャンプの速度
    public float jumpHeight; // 高さの制限
    public GroundCheck head; // 頭をぶつけた判定
    public float jumpLimitTime; // ジャンプの制限時間


    // 変数
    private Animator anim = null;
    private Rigidbody2D rb = null;
    private bool isGround = false;
    private bool isJump = false;
    private bool isHead = false;
    private float jumpPos = 0.0f;
    private float jumpTime = 0.0f;
   


    // Start is called before the first frame update
    void Start()
    {
        anim = GetComponent<Animator>();
        rb = GetComponent<Rigidbody2D>();
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        // 接地判定を得る
        isGround = ground.IsGround();
        isHead = head.IsGround();

        // キー入力時に行動
        float horizontalKey = Input.GetAxis("Horizontal");
        float xSpeed = 0.0f;
        float ySpeed = -gravity;
        float verticalKey = Input.GetAxis("Vertical");

        // ジャンプ入力時
        if(isGround)
        {
            if (verticalKey > 0 && jumpTime < jumpLimitTime)
            {
                ySpeed = jumpSpeed;
                jumpPos = transform.position.y; // ジャンプした位置を記録
                isJump = true;
                jumpTime = 0.0f;
            }
            else
            {
                isJump = false;
            }
            }
            else if(isJump)
            {
                // 上ボタンを押されている。現在の高さがジャンプした位置から自分の決めた位置より下ならジャンプを継続
                if(verticalKey > 0 && jumpPos + jumpHeight > transform.position.y && jumpTime < jumpLimitTime && !isHead)
                {
                    ySpeed = jumpSpeed;
                    jumpTime += Time.deltaTime;
                }
                else
                {
                    isJump = false;
                    jumpTime = 0.0f;
                }
            }

        if(horizontalKey > 0)
        {
            transform.localScale = new Vector3(1, 1, 1);
            anim.SetBool("run", true);
            xSpeed = speed;
        }
        else if(horizontalKey < 0)
        {
            transform.localScale = new Vector3(-1, 1, 1);
            anim.SetBool("run", true);
            xSpeed = -speed;
        }
        else
        {
            anim.SetBool("run", false);
            xSpeed = 0.0f;
        }
        anim.SetBool("jump",isJump);
        anim.SetBool("ground", isGround);
        rb.velocity = new Vector2(xSpeed, ySpeed);
    }
}
